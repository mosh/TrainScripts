
defaultiOSSdkVersion="9.3";
defaultOSXSdkVersion="10.11";
defaultWatchOSSdkVersion="2.2";
defaultTvOSSdkVersion="9.2";

try { if (hi);                } catch(e) { hi = env['headerimporter'] }
try { if (hi);                } catch(e) { hi = "./HeaderImporter.exe" }
try { if (developerFolder);   } catch(e) { developerFolder=shell.exec("/usr/bin/xcode-select", "--print-path", { capture: true } ).trim(); }
try { if (fxBaseFolder);      } catch(e) { fxBaseFolder="./" }
try { if (debug);             } catch(e) { debug = false }
try { if (iOSSdkVersion);     } catch(e) { iOSSdkVersion = defaultiOSSdkVersion }
try { if (OSXSdkVersion);     } catch(e) { OSXSdkVersion = defaultOSXSdkVersion }
try { if (watchOSSdkVersion); } catch(e) { watchOSSdkVersion = defaultWatchOSSdkVersion }
try { if (tvOSSdkVersion);    } catch(e) { tvOSSdkVersion = defaultTvOSSdkVersion }

try { if (headerBlackList); } catch(e) { headerBlackList = []; }

hi = expand(hi);
developerFolder = expand(developerFolder);
fxBaseFolder = expand(fxBaseFolder);

doBuildDeploymentTargets = true;
doARM64 = true;
doDeleteJsonFiles = true;

log("header importer: $(hi)");
log("Developer folder: $(developerFolder)");
log("FX Base folder: $(fxBaseFolder)");
log("OS X version: $(OSXSdkVersion)");
log("iOS version: $(iOSSdkVersion)");
log("watchOS version: $(watchOSSdkVersion)");
log("tvOS version: $(tvOSSdkVersion)");

// these will be used by paths passed in.
OSXSdk="$(developerFolder)/Platforms/MacOSX.platform/Developer/SDKs/MacOSX$(OSXSdkVersion).sdk";
iOSSdk="$(developerFolder)/Platforms/iPhoneOS.platform/Developer/SDKs/iPhoneOS$(iOSSdkVersion).sdk";
watchOSSdk="$(developerFolder)/Platforms/WatchOS.platform/Developer/SDKs/WatchOS$(watchOSSdkVersion).sdk";
tvOSSdk="$(developerFolder)/Platforms/AppleTVOS.platform/Developer/SDKs/AppleTVOS$(tvOSSdkVersion).sdk";
iOSSimulatorSdk="$(developerFolder)/Platforms/iPhoneSimulator.platform/Developer/SDKs/iPhoneSimulator$(iOSSdkVersion).sdk";
watchOSSimulatorSdk="$(developerFolder)/Platforms/WatchSimulator.platform/Developer/SDKs/WatchSimulator$(watchOSSdkVersion).sdk";
tvOSSimulatorSdk="$(developerFolder)/Platforms/AppleTVSimulator.platform/Developer/SDKs/AppleTVSimulator$(tvOSSdkVersion).sdk";


//
// Hardcoded file and framework lists
//

var rtlFiles = ["TargetConditionals.h",
				"stdio.h",
				"sys/*.h",
				"assert.h",
				"ctype.h",
				"errno.h",
				"limits.h",
				"locale.h",
				"math.h",
				"setjmp.h",
				"signal.h",
				"stddef.h",
				"stdlib.h",
				"time.h",
				"inttypes.h",
				//"stdbool.h",
				"stdint.h",
				//"NSSystemDirectories.h",
				"arpa/*.h",			//An error occurred: Cannot cast from source type to destination type.
				//"bsm/*.h",       	//iOS6: bsm/audit_filter.h (51:40 pp: 91) One of ClosingParenthesis, Comma expected; current token: Identifier  tok
				"device/*.h",
				"CommonCrypto/*.h",
				"dispatch/dispatch.h",
				"libkern/*.h",
				"malloc/*.h",
				//"net/*.h",       	//iOS6: net/pfkeyv2.h (109:3 pp: 135) Declaration expected; current token: Identifier  u_int8_t
				"netinet/in.h",
				"netinet/ip.h",
				"netinet/tcp.h",
				//"netinet6/*.h",  	//iOS6:  do not include netinet6/in6.h directly, include netinet/in.h. see RFC2553
				"objc/*.h",
				//"rpc/*.h",       	//iOS6: rpc/xdr.h (129:3 pp: 176) Declaration expected; current token: Identifier  bool_t
				//"rpcsvc/*.h",    	// rpcsvc/yp_prot.h (146:2 pp: 178) (146:2 pp: 178) Declaration expected; current token: Identifier  bool_t
				"uuid/*.h",
				"pthread/pthread.h"];

var rtlFiles_OSX = ["cups/cups.h",
				    "cups/ppd.h",
					//"cups/*.h",
					/*"curl/*.h",
					"DNSServiceDiscovery/*.h",
					"editline/*.h",
					"ffi/*.h",
					"gssapi/*.h",
					"hfs/*.h",*/  //TEST LATER

					"i386/limits.h",

					"netinet/tcpip.h",
					"netinet/udp.h",

					//"net-snmp/*.h", 	//net-snmp/types.h (11) "Please include <net-snmp/net-snmp-config.h> before this file"
					//"netkey/*.h",  	//netkey/keysock.h (39:2 pp: 93) Declaration expected; current token: Identifier  u_quad_t
					//"nfs/*.h",     	//An error occurred: nfs/krpc.h (39:2 pp: 107) Declaration expected; current token: Identifier  mbuf_t
					//"openssl/*.h",  	// deprecated, not sure if worth including, might break 10.9. also An error occurred: openssl/bn.h (284:2 pp: 996) Declaration expected; current token: Identifier  BN_ULONG
					//"pcap/*.h",		//pcap/namedb.h (56:63 pp: 96) Declaration expected; current token: Identifier  FILE
					//"protocols/*.h",  //10.6: protocols/dumprestore.h (102:35 pp: 134) Declaration expected; current token: Identifier  daddr_t
					//"sasl/*.h",		// sasl/hmac-md5.h (11:5 pp: 54) Declaration expected; current token: Identifier  MD5_CTX
					//"security/*.h",	// security/mac_policy.h (83) Cannot find include file: security/security/_label.h
					//"vfs/*.h",    	// fs/vfs_support.h (48) Cannot find include file: vfs/sys/systm.h
					"xar/*.h",
					"xpc/xpc.h"];
var rtlFiles_iOS = ["arm/limits.h"];
var rtlFiles_iOSSimulator = ["i386/limits.h"];

var rtlFiles_watchOS = rtlFiles_iOS;
var rtlFiles_watchOSSimulator = rtlFiles_iOSSimulator;

var rtlFiles_tvOS = rtlFiles_iOS;
var rtlFiles_tvOSSimulator = rtlFiles_iOSSimulator;

var forceIncludes_Shared = [
						{ "Key": "ApplicationServices/HIServices/AXAttributeConstants.h", "Value": [ "CoreFoundation/CoreFoundation.h" ] },
						{ "Key": "ApplicationServices/HIServices/AXNotificationConstants.h", "Value": [ "CoreFoundation/CoreFoundation.h" ] },
						{ "Key": "ApplicationServices/PrintCore/PDEPluginInterface.h", "Value": [ "Foundation/NSObjCRuntime.h" ] },
						{ "Key": "AudioToolbox/AudioToolbox.h", "Value": [ "CoreMIDI/CoreMIDI.h" ] },
						{ "Key": "CalendarStore/CalendarStore.h", "Value": [ "Foundation/Foundation.h" ] },
						{ "Key": "CFOpenDirectory/CFOpenDirectory.h", "Value": [ "Foundation/Foundation.h" ] },
						{ "Key": "CoreTelephony/CTCellularData.h", "Value": [ "Foundation/Foundation.h" ] },
						{ "Key": "EventKit/EventKit.h", "Value": [ "Foundation/Foundation.h" ] },
						{ "Key": "ExternalAccessory/ExternalAccessory.h", "Value": [ "Foundation/Foundation.h" ] },
						{ "Key": "ImageCaptureCore/ImageCaptureCore.h", "Value": [ "Foundation/Foundation.h" ] },
						{ "Key": "IMServicePlugIn/IMServicePlugIn.h", "Value": [ "Foundation/Foundation.h" ] },
						{ "Key": "IOKit/graphics/IOGraphicsInterface.h", "Value": [ "IOKit/graphics/IOGraphicsInterfaceTypes.h" ] },
						{ "Key": "IOKit/i2c/IOI2CInterface.h", "Value": [ "MacTypes.h", "IOKit/IOReturn.h" ] },
						{ "Key": "IOKit/ndrvsupport/IOMacOSVideo.h", "Value": [ "IOKit/graphics/IOGraphicsTypes.h" ] },
						{ "Key": "IOKit/network/IOEthernetStats.h", "Value": [ "MacTypes.h" ] },
						{ "Key": "IOKit/network/IONetworkStats.h", "Value": [ "MacTypes.h" ] },
						{ "Key": "IOKit/ps/IOPowerSources.h", "Value": [ "CoreFoundation/CoreFoundation.h" ] },
						{ "Key": "IOKit/pwr_mgt/IOPMLibDefs.h", "Value": [ "Availability.h" ] },
						{ "Key": "IOKit/DV/DVFamily.h", "Value": [ "MacTypes.h" ] },
						{ "Key": "IOKit/graphics/IOGraphicsEngine.h", "Value": [ "MacTypes.h" ] },
						{ "Key": "IOKit/sbp2/IOFireWireSBP2Lib.h", "Value": [ "CoreFoundation/CFPlugInCOM.h" ] },
						{ "Key": "JavaRuntimeSupport/JavaRuntimeSupport.h", "Value": [ "Foundation/Foundation.h" ] },
						{ "Key": "OpenDirectory/CFOpenDirectory/CFOpenDirectoryConstants.h", "Value": [ "CoreFoundation/CoreFoundation.h" ] },
						{ "Key": "Quartz/ImageKit/ImageKitDeprecated.h", "Value": [ "Foundation/Foundation.h" ] },
						{ "Key": "SafariServices/SafariServices.h","Value": ["UIKit/UIActivity.h"]}
					]
var forceIncludes_iOS = [
						{ "Key": "GameKit/GameKit.h","Value": ["UIKit/UIKit.h", "OpenGLES/gltypes.h"]},
						{ "Key": "GLKit/GLKit.h","Value": ["OpenGLES/gltypes.h"]},
						{ "Key": "NotificationCenter/NotificationCenter.h","Value": ["UIKit/UIVisualEffectView.h"] },
						{ "Key": "SceneKit/SceneKit.h", "Value": [ "CoreImage/CoreImage.h" ] },
						{ "Key": "Social/Social.h","Value": ["UIKit/UITextView.h"]}
						].concat(forceIncludes_Shared);

var forceIncludes_watchOS = forceIncludes_iOS
var forceIncludes_tvOS = forceIncludes_iOS
var forceIncludes_OSX = forceIncludes_Shared

var includeBlackList = [
						"sys/_symbol_aliasing.h",
						"sys/_posix_availability.h",
						"sys/vstat.h",
						"sys/_structs.h",
						"sys/_select.h",
						"sys/kauth.h",
						"sys/acl.h",
						"arm/_types.h",
						"sys/lctx.h",
						"sys/quota.h",
						"sys/vm.h",
						"sys/acct.h",
						"sys/dtrace.h",
						"sys/dtrace_glue.h",
						"sys/dtrace_impl.h",
						"sys/fasttrap.h",
						"sys/fasttrap_isa.h",
						"sys/kern_control.h",
						"sys/lockf.h",
						"sys/mbuf.h",
						"sys/netport.h",
						"sys/pipe.h",
						"sys/ptrace.h",
						"sys/resourcevar.h",
						"sys/sbuf.h",
						"sys/socketvar.h",
						"sys/ubc.h",
						"sys/unpcb.h",
						"sys/vmmeter.h",

						"AppleShareClientCore/afpHLMount.h",
						"ApplicationServices/CoreGraphics/*.h",
						"CarbonCore/CarbonCore.h",
						"CoreServices/LaunchServices/LSOpenDeprecated.h",
						"CoreServices/LaunchServices/LSInfoDeprecated.h",
						"CoreServices/CarbonCore/*.h", //fails on iOS 6.x Simulator and lower
						"x86_64-apple-macosx:device/*.h",
						"i386-apple-ios:device/*.h",
						"IOKit/IOHIDSessionPlugIn.h",
						"IOKit/iokitmig.h",
						"IOKit/IOSharedLock.h",
						"IOKit/graphics/*.h",
						"IOKit/OSMessageNotification.h",
						"IOKit/video/*.h",
						"Kernel/*.h",
						"libkern/OSKextLib.h",
						"OpenAL/oalMacOSX_OALExtensions.h",
						"vecLib/*",
						"WebKit/WebCore/MicroTask.h"
						//"10.6:xpc/xpc.h"
					]
// Framework blacklist Syntax:
//		"<Framework Name>",
//		"<Version>:<Framework Name>",
//		"<Platform>:<Framework Name>"

var frameworksBlackList =  [//'Kernel', /* nothing useful in here */
							'GSS',
							'10.7:GSS', 				/* GSS/gssapi.h (934) Cannot find include file: GSS/GSS/gssapi_spi.h */
							'10.8:GSS',					/* GSS/gssapi_oid.h (25:41 pp: 751) One of Semicolon, Comma expected; current token: Identifier  __gss_krb5_copy_ccache_x_oid_desc */
							'5.0:GSS', 					/* GSS/gssapi.h (840:3 pp: 1733) Declaration expected; current token: Identifier  ssize_t */
							'5.1:GSS', 					/* GSS/gssapi.h (840:3 pp: 1733) Declaration expected; current token: Identifier  ssize_t */
							'6.0:GSS', 					/* GSS/gssapi_oid.h (25:41 pp: 742) One of Semicolon, Comma expected; current token: Identifier  __gss_krb5_copy_ccache_x_oid_desc */

							/* known bad and not supported */
							'10.6:JavaVM',				/* JavaNativeFoundation/JNFJNI.h (20) Cannot find include file: JavaNativeFoundation/JavaVM/jni.h */
							'JavaFrameEmbedding',		/* JavaFrameEmbedding/JavaFrameView.h (10) Cannot find include file: JavaFrameEmbedding/jni.h */
							'Tk', 						/* An error occurred: Tk/tkMacOSX.h (31:61 pp: 662943) Declaration expected; current token: Identifier  TkRegion */

							'QuickTime', 				/* only 4.3 and below, anyways */
							'vecLib', 					/* it's in Accelerate, now */

							/* review later: */
							'AudioVideoBridging', 					/* AudioVideoBridging/AVBConstants.h (16:27 pp: 770) Declaration expected; current token: Identifier  AVB17221ADPEntityCapabilities */
							'10.6:Kerberos', 						/* An error occurred: Kerberos/profile.h (190) Error token! */
							'x86_64-apple-macosx:QuickTime',
							'x86_64-apple-macosx:DVComponentGlue',

							'Kernel',

							'i386-apple-ios:IOKit',

							'i386-apple-ios:Metal',
							'x86_64-apple-ios:Metal'
                           ];

//
// Helper Functions
//

function __niceSdkName(sdkFolder)
{
	var s = path.getFileNameWithoutExtension(sdkFolder);
	s = s.replace('MacOSX', 'OS X ');
	s = s.replace('iPhoneOS', 'iOS ');
	s = s.replace('WatchOS', 'watchOS ');
	s = s.replace('AppleTVOS', 'tvOS ');
	if (s.indexOf('iPhoneSimulator') == 0)
	{
		s = s.replace('iPhoneSimulator', 'iOS ');
		s = s+' Simulator';
	}
	else if (s.indexOf('WatchSimulator') == 0)
	{
		s = s.replace('WatchSimulator', 'watchOS ');
		s = s+' Simulator';
	}
	else if (s.indexOf('AppleTVSimulator') == 0)
	{
		s = s.replace('AppleTVSimulator', 'tvOS ');
		s = s+' Simulator';
	}
	return s;
}

function __niceLibraryName(library)
{
	var library = path.getFileNameWithoutExtension(library);
	//if (library.indexOf("lib") == 0)
	//	library = library.substring(3);

	return library;
}

function __isInBlacklist(blacklist, name, platform, version)
{
	if (blacklist.indexOf(name) > -1)
	{
		log("Skipping "+name+", blacklisted");
		return true;
	}
	if (blacklist.indexOf(version+':'+name) > -1)
	{
		log("Skipping "+name+", blacklisted for "+version);
		return true;
	}
	if (blacklist.indexOf(platform+':'+name) > -1)
	{
		log("Skipping "+name+", blacklisted for "+platform);
		return true;
	}
	return false;
}

function __arrayToString(files)
{
	var result = ""
	for (var f in files)
	{
		if (result != "")
			result += ";";
		result += files[f];
	}
	return result;
}

function __fileList(files, version, platform)
{
	var result = [];
	for (var f in files)
	{
		if (!__isInBlacklist(includeBlackList, files[f], version, platform))
			result = result.concat([files[f]]);
	}
	return result;
}

function __buildRtlFilesList(version, architecture)
{
	var files = __fileList(rtlFiles, version, architecture.triple);
	if (architecture.sdkType == "OS X")
	{
		files = files.concat(__fileList(rtlFiles_OSX, version, architecture.triple));
	}
	else if (architecture.sdkType == "iOS")
	{
		if (architecture.simulator)
			files = files.concat(__fileList(rtlFiles_iOSSimulator, version, architecture.triple));
		else
			files = files.concat(__fileList(rtlFiles_iOS, version, architecture.triple));
	}
	else if (architecture.sdkType == "watchOS")
	{
		if (architecture.simulator)
			files = files.concat(__fileList(rtlFiles_watchOSSimulator, version, architecture.triple));
		else
			files = files.concat(__fileList(rtlFiles_watchOS, version, architecture.triple));
	}
	else if (architecture.sdkType == "tvOS")
	{
		if (architecture.simulator)
			files = files.concat(__fileList(rtlFiles_tvOSSimulator, version, architecture.triple));
		else
			files = files.concat(__fileList(rtlFiles_tvOS, version, architecture.triple));
	}
	return files;
}

//
// SDK Processing
//

function runHeaderImporterForSDK(options, more)
{
	var targetString = options.platform;
	if (options.architecture.cpuType) targetString += ";"+options.architecture.cpuType;

	var jsonImports = []

	for (var n in options.frameworks) {
		newFramework = {
			Name: options.frameworks[n],
			Framework: true,
			Prefix: ""
		}
		jsonImports = jsonImports.concat([newFramework])
	}
	var rtlFramework = {
			Name: "rtl",
			Framework: false,
			Prefix: "",
			Core: true,
			ForceNamespace: "rtl",
			Files: options.rtlFiles
	}
	jsonImports = jsonImports.concat([rtlFramework])

	jsonBlacklist = options.includeBlackList;
	if (options.headerBlackList)
		jsonBlacklist =  jsonBlacklist.concat(options.headerBlackList);

	var json = {
		TargetString: targetString,
		Version: options.version,
		SDKVersionString: options.versionString,
		Imports: jsonImports,
		Defines: options.defines,
		Blacklist: jsonBlacklist,
		ForceInclude: options.forceIncludes,
		Mobile: options.architecture.sdkType != "OS X",
		Platform: options.architecture.sdkType,
		OverrideNamespace: [ { Key: "objc/NSObject.h", Value: "Foundation" },
							 { Key: "objc/NSObjCRuntime.h", Value: "Foundation" } ]
	}

	var jsonName = "import-"+options.architecture.sdkType+(options.architecture.simulator?"-simulator":"")+"-"+options.versionString+"-"+path.getFileName(options.outputpath)+".json"
	jsonName = path.combine(fxBaseFolder, jsonName);
	file.write(jsonName, JSON.stringify(json))
	//file.write(jsonName+".options.json", JSON.stringify(options))

	var s = "import"
	s += ' --json="$(jsonName)"'
	s += ' -o "'+options.outputpath+'"';

	for (var n in options.includepaths)
		s += ' -i "'+options.includepaths[n]+'"';
	for (var n in options.frameworkpaths)
		s += " -f "+options.frameworkpaths[n];
	for (var n in options.nonframeworks)
		s += " -c "+options.nonframeworks[n];

	for (var n in options.link)
		s += " -l "+options.link[n];

	if (more)
		s += " "+more;
	if (debug)
		s += " --debug";


	log(expand(s));
	shell.exec(hi, expand(s));

	if (doDeleteJsonFiles)
		file.remove(jsonName);
}

function doProcessSDK(version, versionString, sdkFolder, architecture, defines, targetFolder, forceIncludes)
{
	targetFolder = path.combine(targetFolder, architecture.triple);
	folder.create(targetFolder);

	var frameworksFolder = expand("$(sdkFolder)/System/Library/Frameworks");

	var frameworks = [];
	var fs = folder.list(frameworksFolder);
	for (i in fs)
	{
		var framework = fs[i];
		var frameworkName = path.getFileNameWithoutExtension(framework);

		if (!__isInBlacklist(frameworksBlackList, frameworkName, version, architecture.triple))
			frameworks = frameworks.concat([frameworkName]);
	}

	runHeaderImporterForSDK({
		platform: architecture.triple,
		outputpath: targetFolder,
		defines: defines,
		includeBlackList: includeBlackList,
		includepaths: [expand('$(sdkFolder)/usr/include')],
		frameworkpaths: [frameworksFolder],
		frameworks: frameworks,
		version: version,
		versionString: versionString,
		architecture: architecture,
		forceIncludes: forceIncludes,
		rtlFiles: __buildRtlFilesList(version, architecture)
	}, '-i ./');
}

function doProcessDeploymentTargetSDK(version, deploymentVersion, sdkFolder, architecture, defines, targetFolder, forceIncludes)
{
	targetFolder = path.combine(targetFolder, architecture.triple);
	folder.create(targetFolder);

	var frameworksFolder = expand("$(sdkFolder)/System/Library/Frameworks");
	var frameworks = ["Foundation"]; // iOS Simulator requires this from rtl/objc. We wont actually *use* the generated file

	runHeaderImporterForSDK({
		platform: architecture.triple,
		outputpath: targetFolder,
		defines: defines,
		includeBlackList: includeBlackList,
		includepaths: [expand('$(sdkFolder)/usr/include')],
		frameworkpaths: [frameworksFolder],
		frameworks: frameworks,
		version: version,
		versionString: version+' ('+deploymentVersion+')',
		architecture: architecture,
		forceIncludes: forceIncludes,
		rtlFiles: __buildRtlFilesList(version, architecture)
	}, '-i ./');

	file.move(path.combine(targetFolder, "rtl.fx"), path.combine(targetFolder, "rtl-$(deploymentVersion).fx"));
	file.remove(path.combine(targetFolder, "Foundation.fx"));
}

//
// Library Processing (not updated to new API yet)
//

function runHeaderImporterForLibrary(options, more)
{
	var p = options.platform;
	if (options.cpu) p += ";"+options.cpu;

	var s = "import -architecture="+p+' -o "'+options.outputpath+'"';

	for (var n in options.defines) {
		s = s +" -d "+options.defines[n];
	}

	for (var n in options.includeBlackList) {
		s += " -b "+options.includeBlackList[n];
	}
	for (var n in options.headerBlackList) {
		s += " -b "+options.headerBlackList[n];
	}

	for (var n in options.includepaths) {
		s += ' -i "'+options.includepaths[n]+'"';
	}

	for (var n in options.frameworkpaths) {
		s += " -f "+options.frameworkpaths[n];
	}

	for (var n in options.nonframeworks) {
		s += " -c "+options.nonframeworks[n];
	}

	for (var n in options.frameworks) {
		s += " -s "+options.frameworks[n];
	}

	for (var n in options.link) {
		s += " -l "+options.link[n];
	}

	if (options.version)
		s += " --version="+options.version;

	if (options.architecture.sdkType)
		s += " --type="+options.architecture.sdkType.toLowerCase().replace(" ", "");

	if (more)
		s += " "+more;
	if (debug)
		s += " --debug";

	s += " -q objc/NSObject.h:Foundation -q objc/NSObjCRuntime.h:Foundation"

	log(expand(s));
	shell.exec(hi, expand(s));
}

function doProcessLibrary(options)
{
	var name = __niceLibraryName(options.library);
	var destinationFolder = path.combine(options.targetFolder, options.platform);
	folder.create(destinationFolder);

	var s = "";

	if (options.headers)
	{
		var headers = __arrayToString(__fileList(options.headers, null, null));
		s  += ' --import="$(name)" --addfiles="$(headers)"'
		if (options.explicitHeaders)
			s  += " --explicit"
	}
	if (options.namespacePrefix)
	{
		s += " --prefix="+options.namespacePrefix
	}
	if (options.baseSDK)
	{
		base = path.combine(fxBaseFolder, options.baseSDK);
		s += ' -fxpaths "'+base+'"';
	}

	for (var n in options.headerBlackList)
		s += " -b "+options.headerBlackList[n];
	for (var n in options.link)
		s += " -l "+options.link[n];
	for (var n in options.includeFXs)
		s += ' --fxpaths "'+options.includeFXs[n]+'"';
	for (var n in options.referenceFXs)
		s += ' --fxreference="'+options.referenceFXs[n]+'"';

	runHeaderImporterForLibrary({
		platform: options.platform,
		outputpath: destinationFolder,
		defines: options.defines,
		includepaths: options.includePaths,
		architecture: options.architecture
	}, expand(s));
}

//
// .fx Helper Functions
//

function clean(targetFolder)
{
	folder.remove(targetFolder);
}

function flatten(targetFolder, architecture)
{
	var subfolder = path.combine(targetFolder, architecture.triple);
	file.move(path.combine(subfolder, "*.fx"), targetFolder);
	folder.remove(subfolder);
}

function merge(targetFolder, architectures)
{
	var a1 = architectures[0].triple;
	var folders = file.list("$(targetFolder)/$(a1)/*.fx"); // use first arch as base. todo later: merge list from all?

	for (f in folders)
	{
		var f2 = path.getFileName(folders[f]);
		var s = 'combine "$(targetFolder)/$(f2)"';
		var count = 0;
		for (a in architectures)
		{
			var a2 = architectures[a].triple;
			if (file.exists("$(targetFolder)/$(a2)/$(f2)"))
			{
				s += expand(' "$(targetFolder)/$(a2)/$(f2)"');
				count++
			}
		}
		if (count > 1)
		{
			shell.exec(hi, s);
		}
		else
		{
			for (a in architectures)
			{
				var a2 = architectures[a].triple;
				if (file.exists("$(targetFolder)/$(a2)/$(f2)"))
					file.move("$(targetFolder)/$(a2)/$(f2)", "$(targetFolder)/");
			}
		}
	}

	for (a in architectures)
	{
		var a2 = architectures[a].triple;
		folder.remove("$(targetFolder)/$(a2)");
	}
}

function mergeOrFlatten(targetFolder, architectures)
{
	if (architectures.length > 1)
		merge(targetFolder, architectures);
	else if (architectures.length == 1)
		flatten(targetFolder, architectures[0]);
}

function codegen(targetFolder)
{
	folder.create("$(targetFolder)/Source");
	var folders = file.list("$(targetFolder)/*.fx");
	for (f in folders)
	{
		f = path.getFileName(folders[f]);
		g = path.getFileNameWithoutExtension(f)+".pas";
		s = 'codegen "$(targetFolder)/$(f)" "$(targetFolder)/Source/$(g)" oxygene';
		shell.exec(hi, s);

		g = path.getFileNameWithoutExtension(f)+".cs";
		s = 'codegen "$(targetFolder)/$(f)" "$(targetFolder)/Source/$(g)" hydrogene';
		shell.exec(hi, s);

		/*g = path.getFileNameWithoutExtension(f)+".cs";
		s = 'codegen "$(targetFolder)/$(f)" "$(targetFolder)/Source/$(g)" silver';
		shell.exec(hi, s);*/
	}
}

function codegenFX(fxFile)
{
	var targetFolder = path.getFolderName(fxFile);
	var g = path.getFileNameWithoutExtension(fxFile)+".pas";
	var s = 'codegen "$(fxFile)" "$(targetFolder)/$(g)" oxygene';
	shell.exec(hi, s);

	var g = path.getFileNameWithoutExtension(fxFile)+".cs";
	var s = 'codegen "$(fxFile)" "$(targetFolder)/$(g)" hydrogene';
	shell.exec(hi, s);

	/*var g = path.getFileNameWithoutExtension(fxFile)+".cs";
	var s = 'codegen "$(fxFile)" "$(targetFolder)/$(g)" silver';
	shell.exec(hi, s);*/
}

//
// Actual SDK logic
//

/* NOTE: Update the docs at http://docs.elementscompiler.com/Concepts/ConditionalDefines/ if the below defines change ! */

_definesShared = ["__LITTLE_ENDIAN__",
				  "__APPLE__",
				  "__APPLE_CC__",
				  "__MACH__",
				  "__GNUC__=4",
				  "__GNUC_MINOR__=2",
				  "__OBJC__",
				  "__OBJC2__",
				  "__NOUGAT__",
				  "JSC_OBJC_API_ENABLED"];

_definesOSX64 =          ["__x86_64__",           "__LP64__=1", "__SSE__", "__SSE2__"].concat(_definesShared);
_definesiOS32 =          ["__arm__"                                                  ].concat(_definesShared);
_definesiOS64 =          ["__arm__", "__arm64__", "__LP64__=1"                       ].concat(_definesShared);
_definesiOSSimulator32 = ["__i386__",                           "__SSE__", "__SSE2__"].concat(_definesShared);
_definesiOSSimulator64 = _definesOSX64

definesOSX64 =              _definesOSX64.concat(["OSX","MACOS"]);
definesiOS32 =              _definesiOS32.concat(["IOS"]);
definesiOS64 =              _definesiOS64.concat(["IOS"]);
definesWatchOS32 =          _definesiOS32.concat(["WATCHOS"]);
definesTvOS64 =             _definesiOS64.concat(["TVOS"]);
definesiOSSimulator32 =     _definesiOSSimulator32.concat(["IOS"]);
definesiOSSimulator64 =     _definesiOSSimulator64.concat(["IOS",    "IOSSIMULATOR",    "SIMULATOR"]);
definesWatchOSSimulator32 = _definesiOSSimulator32.concat(["WATCHOS","WATCHOSSIMULATOR","SIMULATOR"]);
definesTvOSSimulator64 =    _definesiOSSimulator64.concat(["TVOS",   "TVOSSIMULATOR",   "SIMULATOR"]);

/* NOTE: Update the docs at http://docs.elementscompiler.com/Concepts/ConditionalDefines/ if the below defines change ! */

/* Full architecture triples */

var cpuType_Penryn = "penryn";

var architecture_OSX_x86_64            = { triple: "x86_64-apple-macosx",  defines: definesOSX64,              sdkType: "OS X", 				    cpuType: cpuType_Penryn };
var architecture_iOS_armv7             = { triple: "armv7-apple-ios",      defines: definesiOS32,              sdkType: "iOS" };
var architecture_iOS_armv7s            = { triple: "armv7s-apple-ios",     defines: definesiOS32,              sdkType: "iOS",                          				     minimumTargetSDK: "6.0" };
var architecture_iOS_arm64             = { triple: "arm64-apple-ios",      defines: definesiOS64,              sdkType: "iOS",                          				     minimumTargetSDK: "6.0", minimumDeploymentTarget: "6.0" };
var architecture_iOSSimulator_i386     = { triple: "i386-apple-ios",       defines: definesiOSSimulator32,     sdkType: "iOS",     simulator: true, cpuType: cpuType_Penryn };
var architecture_iOSSimulator_x86_64   = { triple: "x86_64-apple-ios",     defines: definesiOSSimulator64,     sdkType: "iOS",     simulator: true, cpuType: cpuType_Penryn, minimumTargetSDK: "6.0", minimumDeploymentTarget: "6.0" };
var architecture_watchOS_armv7k        = { triple: "armv7k-apple-watchos", defines: definesWatchOS32,          sdkType: "watchOS",                          				 minimumTargetSDK: "2.0" };
var architecture_watchOSSimulator_i386 = { triple: "i386-apple-watchos",   defines: definesWatchOSSimulator32, sdkType: "watchOS", simulator: true, cpuType: cpuType_Penryn, minimumTargetSDK: "2.0" };
var architecture_tvOS_arm64            = { triple: "arm64-apple-tvos",     defines: definesiOS64,              sdkType: "tvOS",                          				     minimumTargetSDK: "9.0" };
var architecture_tvOSSimulator_x86_64  = { triple: "x86_64-apple-tvos",    defines: definesiOSSimulator64,     sdkType: "tvOS",    simulator: true, cpuType: cpuType_Penryn, minimumTargetSDK: "9.0" };

var OSXEnvironmentVersionDefine     = '__ENVIRONMENT_MAC_OS_X_VERSION_MIN_REQUIRED__';
var iOSEnvironmentVersionDefine     = '__ENVIRONMENT_IPHONE_OS_VERSION_MIN_REQUIRED__';
var watchOSEnvironmentVersionDefine = '__ENVIRONMENT_WATCH_OS_VERSION_MIN_REQUIRED__';
var tvOSEnvironmentVersionDefine    = '__ENVIRONMENT_TV_OS_VERSION_MIN_REQUIRED__';

var iOSDeploymentTargets = ["8.3", "7.1", "6.1", "5.1", "4.3"];
var OSXDeploymentTargets = ["10.10", "10.9", "10.8", "10.7", "10.6"];
var watchOSDeploymentTargets = [];
var tvOSDeploymentTargets = [];

var MIN_IOS_VERSION_FOR_ARMV7S = "6.0"
var MIN_IOS_VERSION_FOR_ARM64  = "7.0"

function architecturesForOSXVersion(version)
{
	var architectures = [architecture_OSX_x86_64];
	return architectures;
}

function standardOSXArchitectures()
{
	return architecturesForOSXVersion(iOSSdkVersion);
}

function architecturesForiOSVersion(version)
{
	var architectures = [architecture_iOS_armv7];
	if (version >= MIN_IOS_VERSION_FOR_ARMV7S)
		architectures = architectures.concat([architecture_iOS_armv7s]);
	if (version >= MIN_IOS_VERSION_FOR_ARM64 && doARM64)
		architectures = architectures.concat([architecture_iOS_arm64]);
	return architectures;
}

function architecturesForiOSSimulatorVersion(version)
{
	var architectures = [architecture_iOSSimulator_i386];
	if (version >= MIN_IOS_VERSION_FOR_ARM64)
		architectures = architectures.concat([architecture_iOSSimulator_x86_64]);
	return architectures;
}

function standardiOSArchitectures()
{
	return architecturesForiOSVersion(iOSSdkVersion);
}

function standardiOSSimulatorArchitectures()
{
	return architecturesForiOSSimulatorVersion(iOSSdkVersion);
}

function architecturesForWatchOSVersion(version)
{
	//WATCH TODO
	var architectures = [architecture_watchOS_armv7k];
	//if (version >= MIN_IOS_VERSION_FOR_ARM64 && doARM64)
	//	architectures = architectures.concat([architecture_iOS_arm64]);
	return architectures;
}

function architecturesForWatchOSSimulatorVersion(version)
{
	//WATCH TODO
	var architectures = [architecture_watchOSSimulator_i386];
	//if (version >= MIN_IOS_VERSION_FOR_ARM64)
	//	architectures = architectures.concat([architecture_iOSSimulator_x86_64]);
	return architectures;
}

function standardWatchOSArchitectures()
{
	return architecturesForWatchOSVersion(watchOSSdkVersion);
}

function standardWatchOSSimulatorArchitectures()
{
	return architecturesForWatchOSSimulatorVersion(watchOSSdkVersion);
}

function architecturesForTvOSVersion(version)
{
	//WATCH TODO
	var architectures = [architecture_tvOS_arm64];
	//if (version >= MIN_IOS_VERSION_FOR_ARM64 && doARM64)
	//	architectures = architectures.concat([architecture_tvOS_arm64]);
	return architectures;
}

function architecturesForTvOSSimulatorVersion(version)
{
	//WATCH TODO
	var architectures = [architecture_tvOSSimulator_x86_64];
	//if (version >= MIN_IOS_VERSION_FOR_ARM64)
	//	architectures = architectures.concat([architecture_tvOSSimulator_x86_64]);
	return architectures;
}

function standardTvOSArchitectures()
{
	return architecturesForTvOSVersion(tvOSSdkVersion);
}

function standardTvOSSimulatorArchitectures()
{
	return architecturesForTvSSimulatorVersion(tvOSSdkVersion);
}

function sanityCheck()
{
	if (!file.exists(hi))
		error('HeaderImporter.exe not found at $(hi)');
	if (!folder.exists(fxBaseFolder))
		error('FX Base Folder $(fxBaseFolder) not found.');
}

function sanityCheckOSX()
{
	if (!folder.exists(developerFolder))
		error('Developer folder $(developerFolder) not found.');
	if (!folder.exists("$(developerFolder)/Platforms//MacOSX.platform/Developer/SDKs/MacOSX$(OSXSdkVersion).sdk"))
		error('OS X SDK version $(OSXSdkVersion) not found in $(developerFolder)');

	if (!folder.exists("$(fxBaseFolder)/OS X $(OSXSdkVersion)"))
		error('OS X SDK .fx files are not found in $(fxBaseFolder)/OS X $(OSXSdkVersion)');
}

function sanityCheckiOS()
{
	if (!folder.exists(developerFolder))
		error('Developer folder $(developerFolder) not found.');
	if (!folder.exists("$(developerFolder)/Platforms/iPhoneOS.platform/Developer/SDKs/iPhoneOS$(iOSSdkVersion).sdk"))
		error('iOS SDK version $(iOSSdkVersion) not found in $(developerFolder)');
	if (!folder.exists("$(developerFolder)/Platforms/iPhoneSimulator.platform/Developer/SDKs/iPhoneSimulator$(iOSSdkVersion).sdk"))
		error('iOS Simulator SDK version $(iOSSdkVersion) not found in $(developerFolder)');

	if (!folder.exists("$(fxBaseFolder)/iOS $(iOSSdkVersion)"))
		error('iOS SDK .fx files are not found in $(fxBaseFolder)/iOS $(iOSSdkVersion)');
	if (!folder.exists("$(fxBaseFolder)/iOS $(iOSSdkVersion) Simulator"))
		error('iOS Simulator SDK .fx files are not found in $(fxBaseFolder)/iOS $(iOSSdkVersion) Simulator');
}

function sanityCheckWatchOS()
{
	if (!folder.exists(developerFolder))
		error('Developer folder $(developerFolder) not found.');
	if (!folder.exists("$(developerFolder)/Platforms/WatchOS.platform/Developer/SDKs/WatchOS$(watchOSSdkVersion).sdk"))
		error('watchOS SDK version $(watchOSSdkVersion) not found in $(developerFolder)');
	if (!folder.exists("$(developerFolder)/Platforms/WatchSimulator.platform/Developer/SDKs/WatchSimulator$(watchOSSdkVersion).sdk"))
		error('watchOS Simulator SDK version $(watchOSSdkVersion) not found in $(developerFolder)');

	if (!folder.exists("$(fxBaseFolder)/watchOS $(watchOSSdkVersion)"))
		error('watchOS SDK .fx files are not found in $(fxBaseFolder)/watchOS $(watchOSSdkVersion)');
	if (!folder.exists("$(fxBaseFolder)/watchOS $(watchOSSdkVersion) Simulator"))
		error('watchOS Simulator SDK .fx files are not found in $(fxBaseFolder)/watchOS $(watchOSSdkVersion) Simulator');
}

function sanityCheckTvOS()
{
	if (!folder.exists(developerFolder))
		error('Developer folder $(developerFolder) not found.');
	if (!folder.exists("$(developerFolder)/Platforms/AppleTVOS.platform/Developer/SDKs/AppleTVOS$(tvOSSdkVersion).sdk"))
		error('tvOS SDK version $(tvOSSdkVersion) not found in $(developerFolder)');
	if (!folder.exists("$(developerFolder)/Platforms/AppleTVSimulator.platform/Developer/SDKs/AppleTVSimulator$(tvOSSdkVersion).sdk"))
		error('tvOS Simulator SDK version $(tvOSSdkVersion) not found in $(developerFolder)');

	if (!folder.exists("$(fxBaseFolder)/tvOS $(tvOSSdkVersion)"))
		error('tvOS SDK .fx files are not found in $(fxBaseFolder)/tvOS $(tvOSSdkVersion)');
	if (!folder.exists("$(fxBaseFolder)/tvOS $(tvOSSdkVersion) Simulator"))
		error('tvOS Simulator SDK .fx files are not found in $(fxBaseFolder)/tvOS $(tvOSSdkVersion) Simulator');
}

function compareVersions(versionA, versionB) // -1: A is smaller, 0: both are equal, 1 = A is larger
{
	var a = versionA.split(".");
	var b = versionB.split(".");
	if (a.length != 2 || b.length != 2) error("invalid SDK version");

	a[0] = +a[0]; // because JavaScript is awesome
	a[1] = +a[1];
	b[0] = +b[0];
	b[1] = +b[1];

	if (a[0] < b[0]) return -1;
	if (a[0] == b[0] && a[1] < b[1]) return -1;
	if (a[0] == b[0] && a[1] == b[1]) return 0;
	return 1;
}

function calculateOSXIntegerVersion(version)
{
	if (compareVersions(version, "10.10") >= 0)
	{
		return version.replace(".","")+"00"; // 10.10 -> 101000;
	}
	else
	{
		return version.replace(".","")+"0"; // 10.8 -> 1080;
	}
}

function calculateiOSIntegerVersion(version)
{
	return version.replace(".","0")+"00"; // 6.1 -> 60100
}

function calculateIntegerVersion(version, sdkType)
{
	if (sdkType == "OS X")
		return calculateOSXIntegerVersion(version);
	else // "ios", "watchos", "tvos"
		return calculateiOSIntegerVersion(version);
}

//
// High-level SDK processing
//

function processSDK(options)
{
	var targetFolder = __niceSdkName(options.sdkFolder);
	targetFolder = path.combine(fxBaseFolder, targetFolder);
	clean(targetFolder);

	var environmentVersionDefine = options.environmentVersionDefine;
	var architectures = options.architectures;

	if (doBuildDeploymentTargets)
		for (var dk in options.deploymentTargets)
		{
			var deploymentVersion = options.deploymentTargets[dk];
			if (compareVersions(deploymentVersion, options.version) < 0)
			{
				for (a in architectures)
				{
					if (architectures[a].minimumDeploymentTarget == null || compareVersions(architectures[a].minimumDeploymentTarget, deploymentVersion) <= 0)
					{
						var integerVersion = calculateIntegerVersion(deploymentVersion, architectures[a].sdkType);
						var defines = architectures[a].defines.concat([expand("$(environmentVersionDefine)_=$(integerVersion)")]);
						doProcessDeploymentTargetSDK(options.version, deploymentVersion, options.sdkFolder, architectures[a], defines, targetFolder, options.forceIncludes);
					}
				}
			}
		}

	if (options.internalVersion == undefined)
		options.internalVersion = options.version;

	// main target
	for (a in architectures)
	{
		if (architectures[a].minimumTargetSDK == null || compareVersions(architectures[a].minimumTargetSDK, options.version) <= 0)
		{
			var integerVersion = calculateIntegerVersion(options.version, architectures[a].sdkType);
			var defines = [expand("$(environmentVersionDefine)=$(integerVersion)")].concat(architectures[a].defines);
			doProcessSDK(options.internalVersion, options.version, options.sdkFolder,  architectures[a], defines, targetFolder, options.forceIncludes);
		}
	}
	mergeOrFlatten(targetFolder, architectures);
	codegen(targetFolder);
}

function processOSXSDK(version)
{
	processSDK({
		version: version,
		sdkFolder: expand("$(developerFolder)/Platforms/MacOSX.platform/Developer/SDKs/MacOSX$(version).sdk"),
		architectures: architecturesForOSXVersion(version),
		deploymentTargets: OSXDeploymentTargets,
		environmentVersionDefine: OSXEnvironmentVersionDefine,
		forceIncludes: forceIncludes_OSX
		});
	folder.create("$(fxBaseFolder)/__CI2Shared/");
	folder.create("$(fxBaseFolder)/__Public/");
	zip.compress("$(fxBaseFolder)/__CI2Shared/OS X $(version).zip", "$(fxBaseFolder)", "OS X $(version)/*.*");
	file.copy("$(fxBaseFolder)/__CI2Shared/OS X $(version).zip", "$(fxBaseFolder)/__Public/OS X $(version).zip");
}

function processiOSSimulatorSDK(version)
{
	processSDK({
		version: version,
		sdkFolder: expand("$(developerFolder)/Platforms/iPhoneSimulator.platform/Developer/SDKs/iPhoneSimulator$(version).sdk"),
		architectures: architecturesForiOSSimulatorVersion(version),
		deploymentTargets: iOSDeploymentTargets,
		environmentVersionDefine: iOSEnvironmentVersionDefine,
		forceIncludes: forceIncludes_iOS
		});
}

function processiOSDeviceSDK(version)
{
	processSDK({
		version: version,
		sdkFolder: expand("$(developerFolder)/Platforms/iPhoneOS.platform/Developer/SDKs/iPhoneOS$(version).sdk"),
		architectures: architecturesForiOSVersion(version),
		deploymentTargets: iOSDeploymentTargets,
		environmentVersionDefine: iOSEnvironmentVersionDefine,
		forceIncludes: forceIncludes_iOS
		});
}

function processWatchOSSimulatorSDK(version, internalVersion)
{
	processSDK({
		version: version,
		internalVersion: internalVersion,
		sdkFolder: expand("$(developerFolder)/Platforms/WatchSimulator.platform/Developer/SDKs/WatchSimulator$(version).sdk"),
		architectures: architecturesForWatchOSSimulatorVersion(version),
		deploymentTargets: watchOSDeploymentTargets,
		environmentVersionDefine: watchOSEnvironmentVersionDefine,
		forceIncludes: forceIncludes_watchOS
		});
}

function processWatchOSDeviceSDK(version, internalVersion)
{
	processSDK({
		version: version,
		internalVersion: internalVersion,
		sdkFolder: expand("$(developerFolder)/Platforms/WatchOS.platform/Developer/SDKs/WatchOS$(version).sdk"),
		architectures: architecturesForWatchOSVersion(version),
		deploymentTargets: watchOSDeploymentTargets,
		environmentVersionDefine: watchOSEnvironmentVersionDefine,
		forceIncludes: forceIncludes_watchOS
		});
}

function processTvOSDeviceSDK(version)
{
	processSDK({
		version: version,
		sdkFolder: expand("$(developerFolder)/Platforms/AppleTVOS.platform/Developer/SDKs/AppleTVOS$(version).sdk"),
		architectures: architecturesForTvOSVersion(version),
		deploymentTargets: tvOSDeploymentTargets,
		environmentVersionDefine: tvOSEnvironmentVersionDefine,
		forceIncludes: forceIncludes_tvOS
		});
}

function processTvOSSimulatorSDK(version)
{
	processSDK({
		version: version,
		sdkFolder: expand("$(developerFolder)/Platforms/AppleTVSimulator.platform/Developer/SDKs/AppleTVSimulator$(version).sdk"),
		architectures: architecturesForTvOSSimulatorVersion(version),
		deploymentTargets: tvOSDeploymentTargets,
		environmentVersionDefine: tvOSEnvironmentVersionDefine,
		forceIncludes: forceIncludes_tvOS
		});
}

function processiOSSDK(version)
{
	processiOSDeviceSDK(version);
	processiOSSimulatorSDK(version);
	folder.create("$(fxBaseFolder)/__CI2Shared/");
	folder.create("$(fxBaseFolder)/__Public/");
	zip.compress("$(fxBaseFolder)/__CI2Shared/iOS $(version).zip", "$(fxBaseFolder)", "iOS $(version)/*.*");
	zip.compress("$(fxBaseFolder)/__CI2Shared/iOS $(version) Simulator.zip", "$(fxBaseFolder)", "iOS $(version) Simulator/*.*");
	zip.compress("$(fxBaseFolder)/__Public/iOS $(version).zip", "$(fxBaseFolder)", "iOS $(version)/*.*;iOS $(version) Simulator/*.*");
}

function processWatchOSSDK(version, internalVersion)
{
	processWatchOSDeviceSDK(version, internalVersion);
	processWatchOSSimulatorSDK(version, internalVersion);
	folder.create("$(fxBaseFolder)/__CI2Shared/");
	folder.create("$(fxBaseFolder)/__Public/");
	zip.compress("$(fxBaseFolder)/__CI2Shared/watchOS $(version).zip", "$(fxBaseFolder)", "watchOS $(version)/*.*");
	zip.compress("$(fxBaseFolder)/__CI2Shared/watchOS $(version) Simulator.zip", "$(fxBaseFolder)", "watchOS $(version) Simulator/*.*");
	zip.compress("$(fxBaseFolder)/__Public/watchOS $(version).zip", "$(fxBaseFolder)", "watchOS $(version)/*.*;watchOS $(version) Simulator/*.*");
}

function processTvOSSDK(version)
{
	processTvOSDeviceSDK(version);
	processTvOSSimulatorSDK(version);
	folder.create("$(fxBaseFolder)/__CI2Shared/");
	folder.create("$(fxBaseFolder)/__Public/");
	zip.compress("$(fxBaseFolder)/__CI2Shared/tvOS $(version).zip", "$(fxBaseFolder)", "tvOS $(version)/*.*");
	zip.compress("$(fxBaseFolder)/__CI2Shared/tvOS $(version) Simulator.zip", "$(fxBaseFolder)", "tvOS $(version) Simulator/*.*");
	zip.compress("$(fxBaseFolder)/__Public/tvOS $(version).zip", "$(fxBaseFolder)", "tvOS $(version)/*.*;tvOS $(version) Simulator/*.*");
}

//
// High-level Library processing
//

function copyLibraries(list, targetFolder, areStatic)
{
	if (list)
	{
		for (var n in list)
		{
			var sourcePath = list[n]
			var destName = path.getFileName(sourcePath);
			if (path.getFileNameExtension(destName) == "")
			{
				if (areStatic)
				 	destName = destName+".a";
				else
				 	destName = destName+".dylib";
			}
			else if (path.getFileNameExtension(destName) == ".framework")
			{
				log("todo: flatten this first");
				destName = destName+"z";
				zip.compress(path.combine(targetFolder, destName), expand(sourcePath));
				return;
			}
			if (areStatic && destName.indexOf("lib") != 0)
				destName = "lib"+destName;

			file.copy(expand(sourcePath), path.combine(targetFolder, destName));
		}
	}
}

function processLibrary(options)
{
	sanityCheck();

	var targetFolder = path.combine(__niceLibraryName(options.library), options.subFolder);
	if (options.destinationFolder)
		targetFolder = path.combine(options.destinationFolder, targetFolder);
	else
		targetFolder = path.combine(fxBaseFolder, targetFolder);
	clean(targetFolder);

	var architectures;
	if (options.architectures)
		architectures = options.architectures;
	else
		architectures = architecturesForiOSVersion(iOSSdkVersion);

	for (a in options.architectures)
		doProcessLibrary(
		{
			targetFolder: targetFolder,
			library: options.library,
			headers: options.headers,
			explicitHeaders: options.explicitHeaders,
			link: options.link,
			includePaths: options.includePaths,
			includeFXs: options.includeFXs,
			platform: architectures[a].triple,
			defines: null,
			namespacePrefix: options.namespacePrefix,
			referenceFXs: options.referenceFXs,
			headerBlackList: options.headerBlackList,
			architecture: architectures[a],
			baseSDK: options.baseSDK
		});

	mergeOrFlatten(targetFolder, architectures);
	codegenFX(path.combine(targetFolder, __niceLibraryName(options.library)+".fx"));
	copyLibraries(options.copyLibs, targetFolder, options.libsAreStatic);
}

function processOSXLibrary(options)
{
	sanityCheck();
	sanityCheckOSX();

	options.subFolder = "OS X";
	if (!options.architectures)
		options.architectures = architecturesForOSXVersion(iOSSdkVersion);
	options.baseSDK = "OS X $(OSXSdkVersion)";

	processLibrary(options);
}

function processiOSDeviceLibrary(options)
{
	sanityCheck();
	sanityCheckiOS();

	options.subFolder = "iOS";
	if (!options.architectures)
		options.architectures = architecturesForiOSVersion(iOSSdkVersion);
	options.baseSDK = "iOS $(iOSSdkVersion)";

	processLibrary(options);
}

function processiOSSimulatorLibrary(options)
{
	sanityCheck();
	sanityCheckiOS();

	options.subFolder = "iOS Simulator";
	if (!options.architectures)
		options.architectures = architecturesForiOSSimulatorVersion(iOSSdkVersion);
	options.baseSDK = "iOS $(iOSSdkVersion) Simulator";

	processLibrary(options);
}

function processWatchOSDeviceLibrary(options)
{
	sanityCheck();
	sanityCheckWatchOS();

	options.subFolder = "watchOS";
	if (!options.architectures)
		options.architectures = architecturesForWatchOSVersion(watchOSSdkVersion);
	options.baseSDK = "watchOS $(watchOSSdkVersion)";

	processLibrary(options);
}

function processWatchOSSimulatorLibrary(options)
{
	sanityCheck();
	sanityCheckWatchOS();

	options.subFolder = "watchOS Simulator";
	if (!options.architectures)
		options.architectures = architecturesForWatchOSSimulatorVersion(watchOSSdkVersion);
	options.baseSDK = "watchOS $(watchOSSdkVersion) Simulator";

	processLibrary(options);
}

function processTvOSDeviceLibrary(options)
{
	sanityCheck();
	sanityCheckTvOS();

	options.subFolder = "tvOS";
	if (!options.architectures)
		options.architectures = architecturesForTvOSVersion(tvOSSdkVersion);
	options.baseSDK = "tvOS $(tvOSSdkVersion)";

	processLibrary(options);
}

function processTvOSSimulatorLibrary(options)
{
	sanityCheck();
	sanityCheckTvOS();

	options.subFolder = "tvOS Simulator";
	if (!options.architectures)
		options.architectures = architecturesForTvOSSimulatorVersion(tvOSSdkVersion);
	options.baseSDK = "tvOS $(tvOSSdkVersion) Simulator";

	processLibrary(options);
}

function __expandSdkPathInArray(array, sdkPath)
{
	for (i in array)
		array[i] = expand(array[i]);
	return array;
}

function processLibraryForAllPlatforms(options)
{
	sdkPath = iOSSdk;
	processiOSLibrary({
		library: options.library,
		headers: options.headers,
		explicitHeaders: options.headers,
		link: options.link,
		includePaths: __expandSdkPathInArray(options.includePaths),
		namespacePrefix: options.namespacePrefix,
		architectures: standardiOSArchitectures()
	});

	sdkPath = watchOSSdk;
	processWatchOSLibrary({
		library: options.library,
		headers: options.headers,
		explicitHeaders: options.headers,
		link: options.link,
		includePaths: __expandSdkPathInArray(options.includePaths),
		namespacePrefix: options.namespacePrefix,
		architectures: standardWatchOSArchitectures()
	});

	sdkPath = tvOSSdk;
	processTvOSLibrary({
		library: options.library,
		headers: options.headers,
		explicitHeaders: options.headers,
		link: options.link,
		includePaths: __expandSdkPathInArray(options.includePaths),
		namespacePrefix: options.namespacePrefix,
		architectures: standardTvOSArchitectures()
	});

	sdkPath = OSXSdk;
	processOSXLibrary({
		library: options.library,
		headers: options.headers,
		explicitHeaders: options.headers,
		link: options.link,
		includePaths: __expandSdkPathInArray(options.includePaths),
		namespacePrefix: options.namespacePrefix,
		architectures: standardOSXArchitectures()
	});
}

/*function processOSXFramework(options)
{
	sanityCheck();
	sanityCheckOSX();

	targetFolder = path.combine(__niceLibraryName(options.framework), "OS X");
	if (options.destinationFolder)
		targetFolder = path.combine(options.destinationFolder, targetFolder);
	else
		targetFolder = path.combine(fxBaseFolder, targetFolder);
	clean(targetFolder);

	frameworksFolder = path.getFolderName(options.framework);
	framework = __niceLibraryName(options.framework);

	s = "";
	for (var n in options.includeFXs)
		s += ' --fxpaths "'+options.includeFXs[n]+'"';
	for (var n in options.referenceFXs)
		s += ' --fxreference="'+options.referenceFXs[n]+'"';
	s += ' --fxreference="rtl"';

	runHeaderImporterForSDK({
		platform: x64,
		outputpath: targetFolder,
		defines: options.defines,
		frameworkpaths: [frameworksFolder],
		frameworks: [framework],
		type: "osx"
	}, s);


	flatten(targetFolder, x64);
	//copyLibraries(options.copyLibs, targetFolder);
}*/

function __fixStringArrayFromDevicetoSimulator(source)
{
	//log(source.length);
	if (!source) return;

	var result = new Array(source.length);
	for (var s in source)
		result[s] = source[s].replace("iPhoneOS", "iPhoneSimulator").replace("iphoneos", "iphonesimulator")
							 .replace("WatchOS", "WatchSimulator").replace("watchos", "watchsimulator")
							 .replace("AppleTVOS", "AppleTVSimulator").replace("appletvos", "appletvsimulator")
	return result;
}

function __fixStringArrayFromDevicetoSimulatorEx(source)
{
	if (!source) return;
	source = __fixStringArrayFromDevicetoSimulator(source)

	var result = new Array(source.length);
	for (var s in source)
		result[s] = source[s].replace("/iOS/", "/iOS Simulator/").replace("/watchOS/", "/watchOS Simulator/").replace("/tvOS/", "/tvOS Simulator/");
	return result;
}

function processiOSLibrary(options)
{
	processiOSDeviceLibrary(options);

	options.copyLibs     = __fixStringArrayFromDevicetoSimulator(options.copyLibs);
	options.includePaths = __fixStringArrayFromDevicetoSimulator(options.includePaths);
	options.includeFXs   = __fixStringArrayFromDevicetoSimulatorEx(options.includeFXs); // hack: only this one also replaces /iOS/
	options.architectures = options.simulatorArchitectures; // use standard architectures for Simulator, or optionally provided ones
	processiOSSimulatorLibrary(options);
}

function processWatchOSLibrary(options)
{
	processWatchOSDeviceLibrary(options);

	options.copyLibs     = __fixStringArrayFromDevicetoSimulator(options.copyLibs);
	options.includePaths = __fixStringArrayFromDevicetoSimulator(options.includePaths);
	options.includeFXs   = __fixStringArrayFromDevicetoSimulatorEx(options.includeFXs); // hack: only this one also replaces /iOS/
	options.architectures = options.simulatorArchitectures; // use standard architectures for Simulator, or optionally provided ones
	processWatchOSSimulatorLibrary(options);
}

function processTvOSLibrary(options)
{
	processTvOSDeviceLibrary(options);

	options.copyLibs     = __fixStringArrayFromDevicetoSimulator(options.copyLibs);
	options.includePaths = __fixStringArrayFromDevicetoSimulator(options.includePaths);
	options.includeFXs   = __fixStringArrayFromDevicetoSimulatorEx(options.includeFXs); // hack: only this one also replaces /iOS/
	options.architectures = options.simulatorArchitectures; // use standard architectures for Simulator, or optionally provided ones
	processTvOSSimulatorLibrary(options);
}

function prepareFrameworkOptions(options)
{
	var frameworkName = path.getFileNameWithoutExtension(options.framework);

	if (options.library == null) options.library = frameworkName;
	if (options.allHeaders)
	{
		options.headers = ["*.h"];
	}
	else
	{
		if (options.headers == null)
			options.headers = [frameworkName+".h"];
	}
	if (options.namespacePrefix == null) options.namespacePrefix = frameworkName;

	options.includePaths = [path.combine(options.framework, "Headers")];
	return options;
}

function processFakeiOSFramework(options)
{
	options = prepareFrameworkOptions(options);
	log(options);

	var frameworkName = path.getFileNameWithoutExtension(options.framework);
	options.library = "lib"+path.getFileNameWithoutExtension(options.framework);
	if (options.link)
		options.link = [frameworkName].concat(options.link);
	else
		options.link = [frameworkName]

	options.copyLibs = [path.combine(options.framework, frameworkName)];
	options.libsAreStatic = true;
	processiOSLibrary(options);
}

function processOSXFramework(options)
{
	options = prepareFrameworkOptions(options);
	log(options);
	//options.headers = [];

	options.copyLibs = [options.framework];
	options.libsAreStatic = true;

	var frameworkName = path.getFileNameWithoutExtension(options.framework);
	//options.frameworkLink = [frameworkName].concat(options.frameworkLink);
	processOSXLibrary(options);
}

